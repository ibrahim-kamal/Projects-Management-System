@model Project_Management_System.Models.PM

@{
    ViewBag.Title = "SetQualification";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>Animated float labels using jQuery and CSS3</title>



    <style type="text/css">
            main {
                width: 500px;
                margin: 0 auto;
                padding-bottom: 10px;
                background: white;
                border-radius: 3px;
                overflow: hidden;
            }

            h1 {
                font-size: 24px;
                font-weight: normal;
                background: hsl(120, 40%, 95%);
                color: hsl(120, 40%, 30%);
                text-align: center;
                padding: 20px 0;
                margin-bottom: 40px;
            }

            .flp {
                padding: 0 50px;
            }
                /*Let's place the label over the input*/
                .flp div {
                    position: relative;
                    margin-bottom: 30px;
                }

                .flp input, .flp label {
                    width: 400px;
                    display: block;
                    font: inherit;
                    font-size: 16px;
                    line-height: 24px;
                    /*fixed height for FF line height issue.
        height = 24(lineheight) + 10*2(padding) + 2(border)*/
                    height: 46px;
                    border: 1px solid #999;
                }

                .flp input {
                    padding: 10px;
                    outline: none;
                    border-radius: 3px;
                }

                .flp label {
                    position: absolute;
                    left: 0;
                    top: 0;
                    /*left/right padding will be 2px less, adjusted by padding on .ch*/
                    padding: 10px 8px;
                    border-color: transparent;
                    color: #666;
                    cursor: text;
                }

            /*label styles*/
            .ch {
                display: block;
                float: left;
                position: relative; /*for upward animation*/
                background: white;
            }

                .ch:first-child {
                    padding-left: 2px;
                }

                .ch:last-child {
                    padding-right: 2px;
                }

            /*active input label*/
            .focussed {
                /*when any input is already focussed clicking on it(label) again won't do anything*/
                pointer-events: none;
            }


            .subscribe {
                position: absolute;
                left: 50%;
                top: 50%;
                -webkit-transform: translate(-50%, -50%);
                -moz-transform: translate(-50%, -50%);
                -o-transform: translate(-50%, -50%);
                transform: translate(-50%, -50%);
                width: 400px;
            }

            input:focus {
                outline: 0;
            }

            a {
                text-decoration: none;
            }

            ul {
                list-style: none;
            }

            input[type="submit"] {
                display: block;
                margin: 0 auto;
                width: 50%;
                height: 50px;
                font-family: Helvetica;
                border-bottom: 5px solid steelblue;
                border-top: none;
                border-left: none;
                border-right: none;
                background: linear-gradient(#5FDDFF,#53ADDF);
                color: white;
                border-radius: 10px;
                box-shadow: 0px 2px 10px grey;
                transition: 150ms ease;
                font-weight: bold;
            }

                input[type="submit"]:active {
                    border: none;
                    border-bottom: 2px solid steelblue;
                    box-shadow: 0px 1px 5px grey;
                    background: linear-gradient(#53AFFF,#5FCDFF);
                    color: #FFF;
                }

            .btn-3d-sub {
                display: block;
                margin: 0 auto;
                margin-bottom: -50px;
                width: 50%;
                height: 50px;
                font-family: Helvetica;
                border-bottom: 5px solid #173814;
                border-top: none;
                border-left: none;
                border-right: none;
                background: linear-gradient(#469e3f,#255b20);
                color: white;
                border-radius: 10px;
                box-shadow: 0px 2px 10px grey;
                transition: 150ms ease;
                text-align: center;
                line-height: 50px;
                font-weight: bold;
            }

                .btn-3d-sub:active {
                    border: none;
                    border-bottom: 2px solid steelblue;
                    box-shadow: 0px 1px 5px grey;
                    background: linear-gradient(#255b20,#469e3f);
                    color: #FFF;
                }

            .btn-3d-can {
                display: block;
                margin: 0 auto;
                width: 50%;
                height: 50px;
                font-family: Helvetica;
                border-bottom: 5px solid #2d0707;
                border-top: none;
                border-left: none;
                border-right: none;
                background: linear-gradient(#991b1b,#490e0e);
                color: white;
                border-radius: 10px;
                box-shadow: 0px 2px 10px grey;
                transition: 150ms ease;
                text-align: center;
                line-height: 50px;
                font-weight: bold;
            }

                .btn-3d-can:active {
                    border: none;
                    border-bottom: 2px solid #490e0e;
                    box-shadow: 0px 1px 5px grey;
                    background: linear-gradient(#490e0e,#991b1b);
                    color: #FFF;
                }
    </style>>

</head>

<body>

    <main>
        <h1>Write Your Qualification</h1>
        @using (Html.BeginForm("SetQualificationPM", "ProjectManger", FormMethod.Post, new { @class = "flp", enctype = "multipart/form-data" }))
        {
        <div class="form-group">
            <div>
                @Html.EditorFor(model => model.analytical, new { htmlAttributes = new { id = "fname", type = "number" , placeholder= "analytical" } })
            </div>
            <div>
            </div>
            @Html.EditorFor(model => model.highly_organized, new { htmlAttributes = new { id = "email", type = "number", placeholder = "highly organized" } })

        </div>
        <div class="subscribe">
            <button type="submit" class="btn-3d-sub">submit <span class="glyphicon glyphicon-send"></span></button>

            <br />
        </div>
                }

        </main>
    <script src='http://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js'></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js'></script>



    <script>
        //breakdown the labels into single character spans
        $(".flp label").each(function () {
            var sop = '<span class="ch">'; //span opening
            var scl = '</span>'; //span closing
            //split the label into single letters and inject span tags around them
            $(this).html(sop + $(this).html().split("").join(scl + sop) + scl);
            //to prevent space-only spans from collapsing
            $(".ch:contains(' ')").html("&nbsp;");
        })

        var d;
        //animation time
        $(".flp input").focus(function () {
            //calculate movement for .ch = half of input height
            var tm = $(this).outerHeight() / 2 * -1 + "px";
            //label = next sibling of input
            //to prevent multiple animation trigger by mistake we will use .stop() before animating any character and clear any animation queued by .delay()
            $(this).next().addClass("focussed").children().stop(true).each(function (i) {
                d = i * 50;//delay
                $(this).delay(d).animate({ top: tm }, 200, 'easeOutBack');
            })
        })
        $(".flp input").blur(function () {
            //animate the label down if content of the input is empty
            if ($(this).val() == "") {
                $(this).next().removeClass("focussed").children().stop(true).each(function (i) {
                    d = i * 50;
                    $(this).delay(d).animate({ top: 0 }, 500, 'easeInOutBack');
                })
            }
        })
    </script>




</body>

</html>