@model Project_Management_System.Models.user

@{
    ViewBag.Title = "Login";
    Layout = null;

}

<head>
    <meta charset="UTF-8">
    <title>Login & Signup Form</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/5.0.0/normalize.min.css">
    <link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.2.0/css/font-awesome.min.css'>
    <link rel="stylesheet" href="~/Content/css/reset.css"> <!-- CSS reset -->
    <link rel="stylesheet" href="~/Content/css/loginStyle.css"> <!-- Resource style -->

</head>
<body>
    <nav class="main-nav">
        <ul>
            <li><a class="signin" href="#0">Sign in</a></li>
            <li><a class="signup" href="#0">Sign up</a></li>
        </ul>
    </nav>
    <div class="user-modal">
        <div class="user-modal-container">
            <ul class="switcher">
                <li><a href="#0">Sign in</a></li>
                <li><a href="#0">New account</a></li>
            </ul>

            <div id="login">
                @using (Html.BeginForm("Login", "Home", FormMethod.Post, new { @class = "form", enctype = "multipart/form-data" }))
                {
                    <div class="form-group">

                        <p class="fieldset">

                            <label class="image-replace email" for="signin-email">E-mail</label>
                            @Html.TextBoxFor(model => model.email, new { @class = "full-width has-padding has-border", id = "signin-email", type = "email", placeholder = "E-mail" })

                        </p>
                    </div>
                    <div class="form-group">

                        <p class="fieldset">

                            <label class="image-replace password" for="signin-password">Password</label>
                            @Html.TextBoxFor(model => model.password, new { @class = "full-width has-padding has-borde", placeholder = "password", type = "password", required = "true", id = "signin-password" })

                            <a href="#0" class="hide-password">Show</a>
                        </p>
                    </div>

                    <p class="fieldset">
                        <input type="checkbox" id="remember-me" checked>
                        <label for="remember-me">Remember me</label>
                    </p>
                    <div class="form-group">


                        <p class="fieldset">
                            <input class="full-width" type="submit" value="Login">
                        </p>
                    </div>

                    <p class="form-bottom-message"><a href="#0">Forgot your password?</a></p>
                }
                <!-- <a href="#0" class="close-form">Close</a> -->
            </div>


            <div id="signup">
                @using (Html.BeginForm("Registration", "Home", FormMethod.Post, new { @class = "form", enctype = "multipart/form-data" }))
                {
                    <div class="form-group">

                        <div class="preview img-wrapper"></div>
                        <div class="file-upload-wrapper">
                            <input type="file" name="file" class="file-upload-native" accept="image/*" />
                            @Html.LabelFor(model => model.photo, new { placeholder = "upload image", @class = "file-upload-text" })

                            <input type="text" disabled placeholder="upload image" class="file-upload-text" />
                        </div>
                    </div>
                    <div class="form-group">

                        <p class="fieldset">
                            <label class="image-replace username" for="signup-username">First Name</label>
                            @Html.TextBoxFor(model => model.fname, new { @class = "full-width has-padding has-border", id = "signup-username", placeholder = "First Name", type = "text", required = "true" })

                        </p>
                    </div>
                    <div class="form-group">

                        <p class="fieldset">
                            <label class="image-replace username" for="signup-username">Last name</label>
                            @Html.TextBoxFor(model => model.lname, new { @class = "full-width has-padding has-border", id = "signup-username", placeholder = "Last Name", type = "text", required = "true" })

                            @Html.ValidationMessageFor(model => model.lname, "", new { @class = "MessageError" })
                        </p>
                    </div>
                    <div class="form-group">

                        <p class="fieldset">
                            <label class="image-replace email" for="signup-email">E-mail</label>
                            @Html.TextBoxFor(model => model.email, new { @class = "full-width has-padding has-border", id = "signup-email", placeholder = "Example@email.com", type = "email", required = "true" })

                            @Html.ValidationMessageFor(model => model.email, "", new { @class = "MessageError" })
                        </p>
                    </div>
                    <div class="form-group">

                        <p class="fieldset">
                            <label class="image-replace password" for="signup-password">Password</label>
                            @Html.TextBoxFor(model => model.password, new {
                           @class = "full-width has-padding has-border", id = "signup-password" , placeholder = "password", type = "password", required = "true" })

                            <a href="#0" class="hide-password">Show</a>
                            @Html.ValidationMessageFor(model => model.password, "", new { @class = "MessageError" })
                        </p>
                    </div>
                    <div class="form-group">

                        <p class="fieldset">
                            <label class="image-replace mobile" for="signup-mobile">mobile</label>
                            @Html.TextBoxFor(model => model.mobile, new { @class = "full-width has-padding has-border", id = "signup-mobile", type = "number", pattern = "[0-9]{3}-[0-9]{2}-[0-9]{3}", maxlength = "12", placeholder = "Mobile", required = "true" })

                            @Html.ValidationMessageFor(model => model.mobile, "", new { @class = "MessageError" })
                        </p>
                    </div>
                <div class="form-group">

                    <p class="fieldset">
                        <label class="image-replace jop">job Description</label>
                        @Html.EditorFor(model => model.job, new { htmlAttributes = new { @class = "full-width has-padding has-border"  , placeholder = "job Description" } })
                        @Html.ValidationMessageFor(model => model.job, "", new { @class = "text-danger"  })
                    </p>
                </div>
   
                <div class="form-group">

                    <div class="cd-form floating-labels value40">

                        <fieldset>
                            <div>
                                <h4>Select Jop </h4>
                                <p class="cd-select icon">
                                    @{
                                        List<SelectListItem> listItems = new List<SelectListItem>();
                                        listItems.Add(new SelectListItem
                                        {
                                            Text = "Project Manager",
                                            Value = "2"
                                        });
                                        listItems.Add(new SelectListItem
                                        {
                                            Text = "Team Leader",
                                            Value = "3",
                                            Selected = true
                                        });
                                        listItems.Add(new SelectListItem
                                        {
                                            Text = "Jounir Developer",
                                            Value = "4"
                                        });
                                        listItems.Add(new SelectListItem
                                        {
                                            Text = "Customer",
                                            Value = "5"
                                        });
                                    }
                                    @Html.DropDownListFor(model => model.type_id, listItems,  new { @class = "budget"  , optional = "-- Select Status --"})

                                </p>
                            </div>
                        </fieldset>
                    </div>
                </div>
                <div class="form-group">

                    <p class="fieldset">
                        <input class="full-width has-padding" type="submit" value="Create account">
                    </p>
                </div>

            }
                <!-- <a href="#0" class="cd-close-form">Close</a> -->
            </div>
                        <div id="reset-password">
                            <p class="form-message">Lost your password? Please enter your email address. You will receive a link to create a new password.</p>
                            <form class="form">
                                <p class="fieldset">
                                    <label class="image-replace email" for="reset-email">E-mail</label>
                                    <input class="full-width has-padding has-border" id="reset-email" type="email" placeholder="E-mail">
                                    <span class="error-message">An account with this email does not exist!</span>
                                </p>
                                <p class="fieldset">
                                    <input class="full-width has-padding" type="submit" value="Reset password">
                                </p>
                            </form>
                            <p class="form-bottom-message"><a href="#0">Back to log-in</a></p>
                        </div>
                        <a href="#0" class="close-form">Close</a>
                    </div>
    </div>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js'></script>

    <script>$(function () {
            function maskImgs() {
                //$('.img-wrapper img').imagesLoaded({}, function() {
                $.each($('.img-wrapper img'), function (index, img) {
                    var src = $(img).attr('src');
                    var parent = $(img).parent();
                    parent
                        .css('background', 'url(' + src + ') no-repeat center center')
                        .css('background-size', 'cover');
                    $(img).remove();
                });
                //});
            }

            var preview = {
                init: function () {
                    preview.setPreviewImg();
                    preview.listenInput();
                },
                setPreviewImg: function (fileInput) {
                    var path = $(fileInput).val();
                    var uploadText = $(fileInput).siblings('.file-upload-text');

                    if (!path) {
                        $(uploadText).val('');
                    } else {
                        path = path.replace(/^C:\\fakepath\\/, "");
                        $(uploadText).val(path);

                        preview.showPreview(fileInput, path, uploadText);
                    }
                },
                showPreview: function (fileInput, path, uploadText) {
                    var file = $(fileInput)[0].files;

                    if (file && file[0]) {
                        var reader = new FileReader();

                        reader.onload = function (e) {
                            var previewImg = $(fileInput).parents('.file-upload-wrapper').siblings('.preview');
                            var img = $(previewImg).find('img');

                            if (img.length == 0) {
                                $(previewImg).html('<img src="' + e.target.result + '" alt=""/>');
                            } else {
                                img.attr('src', e.target.result);
                            }

                            uploadText.val(path);
                            maskImgs();
                        }

                        reader.onloadstart = function () {
                            $(uploadText).val('uploading..');
                        }

                        reader.readAsDataURL(file[0]);
                    }
                },
                listenInput: function () {
                    $('.file-upload-native').on('change', function () {
                        preview.setPreviewImg(this);
                    });
                }
            };
            preview.init();
        });

        jQuery(document).ready(function ($) {
            var $form_modal = $('.user-modal'),
                $form_login = $form_modal.find('#login'),
                $form_signup = $form_modal.find('#signup'),
                $form_forgot_password = $form_modal.find('#reset-password'),
                $form_modal_tab = $('.switcher'),
                $tab_login = $form_modal_tab.children('li').eq(0).children('a'),
                $tab_signup = $form_modal_tab.children('li').eq(1).children('a'),
                $forgot_password_link = $form_login.find('.form-bottom-message a'),
                $back_to_login_link = $form_forgot_password.find('.form-bottom-message a'),
                $main_nav = $('.main-nav');

            //open modal
            $main_nav.on('click', function (event) {

                if ($(event.target).is($main_nav)) {
                    // on mobile open the submenu
                    $(this).children('ul').toggleClass('is-visible');
                } else {
                    // on mobile close submenu
                    $main_nav.children('ul').removeClass('is-visible');
                    //show modal layer
                    $form_modal.addClass('is-visible');
                    //show the selected form
                    ($(event.target).is('.signup')) ? signup_selected() : login_selected();
                }

            });

            //close modal
            $('.user-modal').on('click', function (event) {
                if ($(event.target).is($form_modal) || $(event.target).is('.close-form')) {
                    $form_modal.removeClass('is-visible');
                }
            });
            //close modal when clicking the esc keyboard button
            $(document).keyup(function (event) {
                if (event.which == '27') {
                    $form_modal.removeClass('is-visible');
                }
            });

            //switch from a tab to another
            $form_modal_tab.on('click', function (event) {
                event.preventDefault();
                ($(event.target).is($tab_login)) ? login_selected() : signup_selected();
            });

            //hide or show password
            $('.hide-password').on('click', function () {
                var $this = $(this),
                    $password_field = $this.prev('input');

                ('password' == $password_field.attr('type')) ? $password_field.attr('type', 'text') : $password_field.attr('type', 'password');
                ('Show' == $this.text()) ? $this.text('Hide') : $this.text('Show');
                //focus and move cursor to the end of input field
                $password_field.putCursorAtEnd();
            });

            //show forgot-password form
            $forgot_password_link.on('click', function (event) {
                event.preventDefault();
                forgot_password_selected();
            });

            //back to login from the forgot-password form
            $back_to_login_link.on('click', function (event) {
                event.preventDefault();
                login_selected();
            });

            function login_selected() {
                $form_login.addClass('is-selected');
                $form_signup.removeClass('is-selected');
                $form_forgot_password.removeClass('is-selected');
                $tab_login.addClass('selected');
                $tab_signup.removeClass('selected');
            }

            function signup_selected() {
                $form_login.removeClass('is-selected');
                $form_signup.addClass('is-selected');
                $form_forgot_password.removeClass('is-selected');
                $tab_login.removeClass('selected');
                $tab_signup.addClass('selected');
            }

            function forgot_password_selected() {
                $form_login.removeClass('is-selected');
                $form_signup.removeClass('is-selected');
                $form_forgot_password.addClass('is-selected');
            }

            //REMOVE THIS - it's just to show error messages
         /*   $form_login.find('input[type="submit"]').on('click', function (event) {
                event.preventDefault();
                $form_login.find('input[type="email"]').toggleClass('has-error').next('span').toggleClass('is-visible');
            });
            $form_signup.find('input[type="submit"]').on('click', function (event) {
                event.preventDefault();
                $form_signup.find('input[type="email"]').toggleClass('has-error').next('span').toggleClass('is-visible');
            });*/


            //IE9 placeholder fallback
            //credits http://www.hagenburger.net/BLOG/HTML5-Input-Placeholder-Fix-With-jQuery.html
            if (!Modernizr.input.placeholder) {
                $('[placeholder]').focus(function () {
                    var input = $(this);
                    if (input.val() == input.attr('placeholder')) {
                        input.val('');
                    }
                }).blur(function () {
                    var input = $(this);
                    if (input.val() == '' || input.val() == input.attr('placeholder')) {
                        input.val(input.attr('placeholder'));
                    }
                }).blur();
                $('[placeholder]').parents('form').submit(function () {
                    $(this).find('[placeholder]').each(function () {
                        var input = $(this);
                        if (input.val() == input.attr('placeholder')) {
                            input.val('');
                        }
                    })
                });
            }

        });


        //credits https://css-tricks.com/snippets/jquery/move-cursor-to-end-of-textarea-or-input/
        jQuery.fn.putCursorAtEnd = function () {
            return this.each(function () {
                // If this function exists...
                if (this.setSelectionRange) {
                    // ... then use it (Doesn't work in IE)
                    // Double the length because Opera is inconsistent about whether a carriage return is one character or two. Sigh.
                    var len = $(this).val().length * 2;
                    this.setSelectionRange(len, len);
                } else {
                    // ... otherwise replace the contents with itself
                    // (Doesn't work in Google Chrome)
                    $(this).val($(this).val());
                }
            });
        };</script>


</body>
